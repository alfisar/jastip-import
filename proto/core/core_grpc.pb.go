// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: core.proto

package corepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CheckHealthyClient is the client API for CheckHealthy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckHealthyClient interface {
	CheckRunning(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Healthy, error)
}

type checkHealthyClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckHealthyClient(cc grpc.ClientConnInterface) CheckHealthyClient {
	return &checkHealthyClient{cc}
}

func (c *checkHealthyClient) CheckRunning(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Healthy, error) {
	out := new(Healthy)
	err := c.cc.Invoke(ctx, "/core.CheckHealthy/CheckRunning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckHealthyServer is the server API for CheckHealthy service.
// All implementations must embed UnimplementedCheckHealthyServer
// for forward compatibility
type CheckHealthyServer interface {
	CheckRunning(context.Context, *emptypb.Empty) (*Healthy, error)
	mustEmbedUnimplementedCheckHealthyServer()
}

// UnimplementedCheckHealthyServer must be embedded to have forward compatible implementations.
type UnimplementedCheckHealthyServer struct {
}

func (UnimplementedCheckHealthyServer) CheckRunning(context.Context, *emptypb.Empty) (*Healthy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRunning not implemented")
}
func (UnimplementedCheckHealthyServer) mustEmbedUnimplementedCheckHealthyServer() {}

// UnsafeCheckHealthyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckHealthyServer will
// result in compilation errors.
type UnsafeCheckHealthyServer interface {
	mustEmbedUnimplementedCheckHealthyServer()
}

func RegisterCheckHealthyServer(s grpc.ServiceRegistrar, srv CheckHealthyServer) {
	s.RegisterService(&CheckHealthy_ServiceDesc, srv)
}

func _CheckHealthy_CheckRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckHealthyServer).CheckRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.CheckHealthy/CheckRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckHealthyServer).CheckRunning(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CheckHealthy_ServiceDesc is the grpc.ServiceDesc for CheckHealthy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheckHealthy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.CheckHealthy",
	HandlerType: (*CheckHealthyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckRunning",
			Handler:    _CheckHealthy_CheckRunning_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}
